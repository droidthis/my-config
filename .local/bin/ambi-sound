#!/bin/bash

# Script name: ambi-sounds
# Description: Choose a ambient background sound to play
# Dependencies: dmenu, ffmpeg, curl, zip

# Need some ambient sound files?  Here are is a collection
# Auto download it if the file doesn't exist
# of 15 free to use sounds for personal or commercial projects:
# http://pbblogassets.s3.amazonaws.com/uploads/2016/09/15-Free-Ambient-Sound-Effects.zip

# The directory where the sound files are located.
soundDir=~/.config/ambient-sound

ambi-dl() {
    link="http://pbblogassets.s3.amazonaws.com/uploads/2016/09/15-Free-Ambient-Sound-Effects.zip"
    curl "$link" -o $soundDir/sound.zip
}

ambi-extract() {
    unzip $soundDir/"sound.zip" -d $soundDir
    mv $soundDir/"15 Free Ambient Sound Effects"/* $soundDir/
    rm -rf $soundDir/sound.zip $soundDir/"15 Free Ambient Sound Effects" $soundDir/"__MACOSX" $soundDir/" Read Me - Free Sound Effects Terms of Use.rtf"
}

if [ ! -d $soundDir ]; then
    mkdir $soundDir
    ambi-dl
    ambi-extract
elif [ -z "$(ls $soundDir)" ]; then
    ambi-dl
    ambi-extract
fi

for entry in "$soundDir"/*.zip
do
    ambi-extract
done

# Produces a listing of the sound files.
soundFiles=$(ls -1 $soundDir)

# An array of options to choose.
declare -a options=(
  "Choose sound file"
  "Play random sound"
  "Stop sound player"
  "Quit"
)

# An array of sound files to choose.
declare -a soundList=$soundFiles

# Piping the options array into dmenu.
# We use "printf '%s\n'" to format the array one item to a line.
choice=$(printf '%s\n' "${options[@]}" | dmenu -i -p 'Ambient sounds:' "${@}")

# If user chooses a sound file.
if [ "$choice" == "Choose sound file" ]; then
  # Piping the soundList array into dmenu.
  # We use "printf '%s\n'" to format the array one item to a line.
  choice=$(printf '%s\n' "${soundList[@]}" | sort | dmenu -i -l 20 -p 'Choose sound file:' "$@")

  # Kill mpv is already playing a sound file.
  killall ffplay || echo "ffplay was not running."

  # Play the chosen sound file.
  ffplay -nodisp -loop 0 "$soundDir/$choice" || exit

# If user chooses to play a random sound.
elif [ "$choice" == "Play random sound" ]; then
  getRand=$(printf '%s\n' "${soundList[@]}" | shuf -n 1)

  # Kill mpv is already playing a sound file.
  killall ffplay || echo "ffplay was not running."

  # Play random sound file.
  ffplay -nodisp -loop 0 "$soundDir/$getRand" || exit

# If user chooses to stop sound playing.
elif [ "$choice" == "Stop sound player" ]; then
  killall ffplay

# What to do if we just escape without choosing anything.
else
  echo "Program terminated." && exit 0
fi

